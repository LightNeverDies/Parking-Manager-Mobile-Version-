{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require(\"../../constants/constants\");\n\nvar initialState = {\n  timer: [],\n  status: false,\n  placeId: null\n};\n\nvar timerSetup = function timerSetup() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case _constants.timerRunning:\n    case _constants.timerSetup_Success:\n      var keyPlace = Object.keys(action.payload);\n      return {\n        status: action.payload[keyPlace[0]].status,\n        placeId: keyPlace[0]\n      };\n\n    case _constants.timerSetup_Finnished:\n    default:\n      return state;\n  }\n};\n\nvar _default = timerSetup;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/timerSetup/reducers/timerSetup_reducers.js"],"names":["initialState","timer","status","placeId","timerSetup","state","action","type","timerRunning","timerSetup_Success","keyPlace","Object","keys","payload","timerSetup_Finnished"],"mappings":";;;;;AAAA;;AAEA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAEjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKC,uBAAL;AAkCA,SAAKC,6BAAL;AACI,UAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYN,MAAM,CAACO,OAAnB,CAAjB;AACA,aAAO;AAAEX,QAAAA,MAAM,EAAEI,MAAM,CAACO,OAAP,CAAeH,QAAQ,CAAC,CAAD,CAAvB,EAA4BR,MAAtC;AAA8CC,QAAAA,OAAO,EAAEO,QAAQ,CAAC,CAAD;AAA/D,OAAP;;AACJ,SAAKI,+BAAL;AAEA;AACI,aAAOT,KAAP;AAzCR;AA2CH,CA7CD;;eA+CeD,U","sourcesContent":["import { timerSetup_Success, timerSetup_Finnished, timerRunning } from '../../constants/constants'\r\n\r\nconst initialState = {\r\n    timer: [],\r\n    status: false,\r\n    placeId: null\r\n}\r\n\r\nconst timerSetup = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case timerRunning:\r\n            //console.log(\"Timer started\", action.payload)\r\n            // if(state.timer[0] === action.payload.placeId) {\r\n            //     return {\r\n            //         ...state,\r\n            //         timer: action.payload\r\n            //     }\r\n            // }\r\n            // const key = Object.keys(action.payload)\r\n            // if(state.timer?.some((x) => key[0] in x)) {\r\n            //     // return { \r\n            //     // ...state, \r\n            //     // timer: state.timer?.map((y) => key[0] in y ? action.payload : y)\r\n            //     return {...state, timer:[...state.timer, action.payload]}\r\n            // } else {\r\n            //     return { ...state, timer: [...state.timer, action.payload] }\r\n            // }\r\n            \r\n            //console.log(action.payload)\r\n            //const exists = state.timer?.findIndex((x) => x)\r\n            // should think about better solution here timer is not updating correctly\r\n            // should update only inside specific place\r\n            // TOMORROW IS THE DAY WE DIE IN HELL\r\n            // TIP: concat is creating new array but push not just slice is crating new array\r\n            // reminder: THINK\r\n            // Redux and React will update only if the state is changed but with push state is the same nothing changed\r\n            // LEARN FROM YOUR MISTAKES\r\n            // const exists = state.timer?.findIndex((x) => x.placeId === action.payload.timer.placeId)\r\n            // if(exists > -1) {\r\n            //     state.timer[exists] = action.payload.timer\r\n            // } else {\r\n            //     //state.timer.concat(action.payload.timer)\r\n            //     return { timer: { [action.payload.timer.placeId] : state.timer.concat(action.payload)}}\r\n            // }\r\n        case timerSetup_Success:\r\n            const keyPlace = Object.keys(action.payload)\r\n            return { status: action.payload[keyPlace[0]].status, placeId: keyPlace[0]}\r\n        case timerSetup_Finnished:\r\n            //return { placeId: action.payload.placeId, hours: action.payload.hours, minutes: action.payload.minutes, seconds: action.payload.seconds, status: action.payload.status }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default timerSetup"]},"metadata":{},"sourceType":"script"}