{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registeredCars = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar registeredCars = function registeredCars(username) {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(fetch(\"http://192.168.1.2:3000/user/registeredCars/?username=\" + username).then(function (response) {\n              return response.json().then(function (result) {\n                if (!result.error) {\n                  dispatch({\n                    type: _constants.registeredCars_Success,\n                    payload: {\n                      status: result.status,\n                      cars: result.cars,\n                      items: result.items\n                    }\n                  });\n                } else {\n                  dispatch({\n                    type: _constants.registeredCars_Failed,\n                    payload: {\n                      status: result.status,\n                      error: result.error\n                    }\n                  });\n                  setTimeout(function () {\n                    dispatch({\n                      type: _constants.registeredCars_Loading\n                    });\n                  }, 1500);\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.registeredCars = registeredCars;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/registeredCars/actions/registeredCars.js"],"names":["registeredCars","username","dispatch","fetch","then","response","json","result","error","type","registeredCars_Success","payload","status","cars","items","registeredCars_Failed","setTimeout","registeredCars_Loading"],"mappings":";;;;;;;;;AAAA;;AAEO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD;AAAA,SAAc,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAClCC,KAAK,4DAA0DF,QAA1D,CAAL,CACLG,IADK,CACA,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,GACnBF,IADmB,CACd,UAACG,MAAD,EAAY;AACd,oBAAG,CAACA,MAAM,CAACC,KAAX,EAAkB;AACdN,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEC,iCADD;AAELC,oBAAAA,OAAO,EAAE;AACLC,sBAAAA,MAAM,EAAEL,MAAM,CAACK,MADV;AAELC,sBAAAA,IAAI,EAAEN,MAAM,CAACM,IAFR;AAGLC,sBAAAA,KAAK,EAAEP,MAAM,CAACO;AAHT;AAFJ,mBAAD,CAAR;AAQH,iBATD,MASO;AACHZ,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEM,gCADD;AAELJ,oBAAAA,OAAO,EAAE;AACLC,sBAAAA,MAAM,EAAEL,MAAM,CAACK,MADV;AAELJ,sBAAAA,KAAK,EAAED,MAAM,CAACC;AAFT;AAFJ,mBAAD,CAAR;AAOAQ,kBAAAA,UAAU,CAAC,YAAM;AACbd,oBAAAA,QAAQ,CAAC;AAAEO,sBAAAA,IAAI,EAAEQ;AAAR,qBAAD,CAAR;AACH,mBAFS,EAEP,IAFO,CAAV;AAGH;AACJ,eAvBmB,CAAd;AAAA,aADA,CADkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAAvB","sourcesContent":["import { registeredCars_Success, registeredCars_Failed, registeredCars_Loading} from \"../../constants/constants\"\r\n\r\nexport const registeredCars = (username) => async (dispatch) => {\r\n    await fetch(`http://192.168.1.2:3000/user/registeredCars/?username=${username}`)\r\n    .then((response) => response.json()\r\n    .then((result) => {\r\n        if(!result.error) {\r\n            dispatch({\r\n                type: registeredCars_Success,\r\n                payload: {\r\n                    status: result.status,\r\n                    cars: result.cars,\r\n                    items: result.items\r\n                }\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: registeredCars_Failed,\r\n                payload: {\r\n                    status: result.status,\r\n                    error: result.error\r\n                }\r\n            })\r\n            setTimeout(() => {\r\n                dispatch({ type: registeredCars_Loading })\r\n            }, 1500)\r\n        }\r\n    }))\r\n}"]},"metadata":{},"sourceType":"script"}