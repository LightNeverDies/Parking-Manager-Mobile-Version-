{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timerSetup = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar timerSetup = function timerSetup(info) {\n  return function _callee(dispatch) {\n    var duration, interval, time, handle;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (info) {\n              duration = _moment.default.duration(info.duration, 'milliseconds');\n              interval = 1000;\n              time = '';\n              handle = setInterval(function () {\n                duration = _moment.default.duration(duration - interval, 'milliseconds');\n                time = duration.hours().toString().padStart(2, '0') + \":\" + duration.minutes().toString().padStart(2, 0) + \":\" + duration.seconds().toString().padStart(2, '0');\n\n                if (time === \"00:00:00\") {\n                  clearInterval(handle);\n                  dispatch({\n                    type: _constants.timerSetup_Finnished,\n                    payload: {\n                      timer: {\n                        placeId: info.placeId,\n                        status: false\n                      }\n                    }\n                  });\n                } else {\n                  dispatch({\n                    type: _constants.timerRunning,\n                    payload: (0, _defineProperty2.default)({}, info.placeId, {\n                      hours: \"\" + duration.hours().toString().padStart(2, '0'),\n                      minutes: \"\" + duration.minutes().toString().padStart(2, 0),\n                      seconds: \"\" + duration.seconds().toString().padStart(2, '0')\n                    })\n                  });\n                }\n              }, interval);\n            } else {\n              dispatch({\n                type: _constants.timerSetup_Finnished,\n                payload: {\n                  timer: []\n                }\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.timerSetup = timerSetup;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/timerSetup/actions/timerSetup.js"],"names":["timerSetup","info","dispatch","duration","moment","interval","time","handle","setInterval","hours","toString","padStart","minutes","seconds","clearInterval","type","timerSetup_Finnished","payload","timer","placeId","status","timerRunning"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAU,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChC,gBAAGD,IAAH,EAAS;AACDE,cAAAA,QADC,GACUC,gBAAOD,QAAP,CAAgBF,IAAI,CAACE,QAArB,EAA+B,cAA/B,CADV;AAEDE,cAAAA,QAFC,GAEU,IAFV;AAGDC,cAAAA,IAHC,GAGM,EAHN;AAKDC,cAAAA,MALC,GAKQC,WAAW,CAAC,YAAM;AAC3BL,gBAAAA,QAAQ,GAAGC,gBAAOD,QAAP,CAAgBA,QAAQ,GAAGE,QAA3B,EAAqC,cAArC,CAAX;AACAC,gBAAAA,IAAI,GAAMH,QAAQ,CAACM,KAAT,GAAiBC,QAAjB,GAA4BC,QAA5B,CAAqC,CAArC,EAAwC,GAAxC,CAAN,SAAsDR,QAAQ,CAACS,OAAT,GAAmBF,QAAnB,GAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,CAA1C,CAAtD,SAAsGR,QAAQ,CAACU,OAAT,GAAmBH,QAAnB,GAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,CAA1G;;AAEA,oBAAGL,IAAI,KAAK,UAAZ,EAAwB;AACrBQ,kBAAAA,aAAa,CAACP,MAAD,CAAb;AACAL,kBAAAA,QAAQ,CAAC;AACJa,oBAAAA,IAAI,EAAEC,+BADF;AAEJC,oBAAAA,OAAO,EAAE;AACLC,sBAAAA,KAAK,EAAE;AACHC,wBAAAA,OAAO,EAAElB,IAAI,CAACkB,OADX;AAEHC,wBAAAA,MAAM,EAAE;AAFL;AADF;AAFL,mBAAD,CAAR;AASF,iBAXD,MAWO;AACHlB,kBAAAA,QAAQ,CAAC;AACLa,oBAAAA,IAAI,EAAEM,uBADD;AAELJ,oBAAAA,OAAO,oCACFhB,IAAI,CAACkB,OADH,EACa;AACZV,sBAAAA,KAAK,OAAKN,QAAQ,CAACM,KAAT,GAAiBC,QAAjB,GAA4BC,QAA5B,CAAqC,CAArC,EAAwC,GAAxC,CADE;AAEZC,sBAAAA,OAAO,OAAKT,QAAQ,CAACS,OAAT,GAAmBF,QAAnB,GAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,CAA1C,CAFA;AAGZE,sBAAAA,OAAO,OAAKV,QAAQ,CAACU,OAAT,GAAmBH,QAAnB,GAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C;AAHA,qBADb;AAFF,mBAAD,CAAR;AAUH;AAEJ,eA5BuB,EA4BrBN,QA5BqB,CALnB;AAkCR,aAlCD,MAkCO;AACHH,cAAAA,QAAQ,CAAC;AACLa,gBAAAA,IAAI,EAAEC,+BADD;AAELC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,KAAK,EAAE;AADF;AAFJ,eAAD,CAAR;AAMH;;AA1C+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAnB","sourcesContent":["import { timerSetup_Finnished, timerRunning } from '../../constants/constants'\r\nimport moment from \"moment\";\r\n\r\nexport const timerSetup = (info) => async(dispatch) => {\r\n    if(info) {\r\n        let duration = moment.duration(info.duration, 'milliseconds')\r\n        let interval = 1000\r\n        let time = ''\r\n\r\n        let handle = setInterval(() => {\r\n            duration = moment.duration(duration - interval, 'milliseconds')\r\n            time = `${duration.hours().toString().padStart(2, '0')}:${duration.minutes().toString().padStart(2, 0)}:${duration.seconds().toString().padStart(2, '0')}`\r\n\r\n            if(time === \"00:00:00\") {\r\n               clearInterval(handle)\r\n               dispatch({\r\n                    type: timerSetup_Finnished,\r\n                    payload: {\r\n                        timer: {\r\n                            placeId: info.placeId,\r\n                            status: false\r\n                        }\r\n                    }\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: timerRunning,\r\n                    payload: {\r\n                        [info.placeId]: {\r\n                            hours: `${duration.hours().toString().padStart(2, '0')}`,\r\n                            minutes: `${duration.minutes().toString().padStart(2, 0)}`,\r\n                            seconds: `${duration.seconds().toString().padStart(2, '0')}`,\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n\r\n        }, interval)\r\n    } else {\r\n        dispatch({\r\n            type: timerSetup_Finnished,\r\n            payload: {\r\n                timer: []\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}