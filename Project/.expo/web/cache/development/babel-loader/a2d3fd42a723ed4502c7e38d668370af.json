{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timerSetup = exports.addTimer = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar addTimer = function addTimer(info) {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: _constants.timerSetup_Success,\n              payload: (0, _defineProperty2.default)({}, info.placeId, {\n                status: info.status\n              })\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.addTimer = addTimer;\n\nvar timerSetup = function timerSetup(info) {\n  return function _callee2(dispatch) {\n    var duration, interval, time;\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (info) {\n              duration = _moment.default.duration(info.duration, 'milliseconds');\n              interval = 1000;\n              time = '';\n            } else {\n              dispatch({\n                type: _constants.timerSetup_Finnished,\n                payload: {\n                  timer: []\n                }\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.timerSetup = timerSetup;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/timerSetup/actions/timerSetup.js"],"names":["addTimer","info","dispatch","type","timerSetup_Success","payload","placeId","status","timerSetup","duration","moment","interval","time","timerSetup_Finnished","timer"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD;AAAA,SAAU,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC9BA,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEC,6BADD;AAELC,cAAAA,OAAO,oCACFJ,IAAI,CAACK,OADH,EACa;AACZC,gBAAAA,MAAM,EAAEN,IAAI,CAACM;AADD,eADb;AAFF,aAAD,CAAR;;AAD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAjB;;;;AAYA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACP,IAAD;AAAA,SAAU,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhC,gBAAGD,IAAH,EAAS;AACDQ,cAAAA,QADC,GACUC,gBAAOD,QAAP,CAAgBR,IAAI,CAACQ,QAArB,EAA+B,cAA/B,CADV;AAEDE,cAAAA,QAFC,GAEU,IAFV;AAGDC,cAAAA,IAHC,GAGM,EAHN;AAkCR,aAlCD,MAkCO;AACHV,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAAEU,+BADD;AAELR,gBAAAA,OAAO,EAAE;AACLS,kBAAAA,KAAK,EAAE;AADF;AAFJ,eAAD,CAAR;AAMH;;AA7C+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAnB","sourcesContent":["import { timerSetup_Success, timerSetup_Finnished, timerRunning } from '../../constants/constants'\r\nimport moment from \"moment\";\r\n\r\nexport const addTimer = (info) => async(dispatch) => {\r\n    dispatch({\r\n        type: timerSetup_Success,\r\n        payload: {\r\n            [info.placeId]: {\r\n                status: info.status\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const timerSetup = (info) => async(dispatch) => {\r\n    \r\n\r\n\r\n    if(info) {\r\n        let duration = moment.duration(info.duration, 'milliseconds')\r\n        let interval = 1000\r\n        let time = ''\r\n\r\n        // let handle = setInterval(() => {\r\n        //     duration = moment.duration(duration - interval, 'milliseconds')\r\n        //     time = `${duration.hours().toString().padStart(2, '0')}:${duration.minutes().toString().padStart(2, 0)}:${duration.seconds().toString().padStart(2, '0')}`\r\n\r\n        //     if(time === \"00:00:00\") {\r\n        //        clearInterval(handle)\r\n        //        dispatch({\r\n        //             type: timerSetup_Finnished,\r\n        //             payload: {\r\n        //                 timer: {\r\n        //                     placeId: info.placeId,\r\n        //                     status: false\r\n        //                 }\r\n        //             }\r\n        //         })\r\n        //     } else {\r\n        //         dispatch({\r\n        //             type: timerRunning,\r\n        //             payload: {\r\n        //                 [info.placeId]: {\r\n        //                     hours: `${duration.hours().toString().padStart(2, '0')}`,\r\n        //                     minutes: `${duration.minutes().toString().padStart(2, 0)}`,\r\n        //                     seconds: `${duration.seconds().toString().padStart(2, '0')}`,\r\n        //                 }\r\n        //             }\r\n        //         })\r\n        //     }\r\n\r\n        // }, interval)\r\n    } else {\r\n        dispatch({\r\n            type: timerSetup_Finnished,\r\n            payload: {\r\n                timer: []\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}