{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _netinfo = _interopRequireDefault(require(\"@react-native-community/netinfo\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _checkInternet2 = require(\"../../reduxStore/checkInternet/actions/checkInternet\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Parking-Manager-Mobile-Version-\\\\Project\\\\src\\\\components\\\\ConnectionChecker\\\\ConnectionChecker.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ConnectionChecker = function ConnectionChecker(props) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      netInfo = _useState2[0],\n      setNetInfo = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    var unsubscribe = _netinfo.default.addEventListener(function (state) {\n      setNetInfo(state.isConnected);\n      props.checkInternet(state.isConnected);\n    });\n\n    return function () {\n      unsubscribe();\n    };\n  }, [setNetInfo]);\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, netInfo));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    checkInternet: function checkInternet(netInfo) {\n      return dispatch((0, _checkInternet2.checkInternet)(netInfo));\n    }\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(ConnectionChecker);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/components/ConnectionChecker/ConnectionChecker.js"],"names":["ConnectionChecker","props","netInfo","setNetInfo","unsubscribe","NetInfo","addEventListener","state","isConnected","checkInternet","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACjC,kBAA8B,qBAAS,KAAT,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,wBAAU,YAAM;AAEhB,QAAMC,WAAW,GAAGC,iBAAQC,gBAAR,CAAyB,UAACC,KAAD,EAAW;AACpDJ,MAAAA,UAAU,CAACI,KAAK,CAACC,WAAP,CAAV;AACAP,MAAAA,KAAK,CAACQ,aAAN,CAAoBF,KAAK,CAACC,WAA1B;AACH,KAHmB,CAApB;;AAKA,WAAO,YAAM;AACTJ,MAAAA,WAAW;AACd,KAFD;AAIC,GAXD,EAWG,CAACD,UAAD,CAXH;AAaA,SACI,4DACI,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,OAAP,CADJ,CADJ;AAMH,CAtBD;;AAwBA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACpCF,IAAAA,aAAa,EAAE,uBAACP,OAAD;AAAA,aAAaS,QAAQ,CAAC,mCAAcT,OAAd,CAAD,CAArB;AAAA;AADqB,GAAL;AAAA,CAAnC;;eAIe,yBAAQ,IAAR,EAAcQ,kBAAd,EAAkCV,iBAAlC,C","sourcesContent":["import NetInfo from '@react-native-community/netinfo'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { checkInternet } from '@src/reduxStore/checkInternet/actions/checkInternet'\r\nimport { Text } from 'react-native'\r\n\r\nconst ConnectionChecker = (props) => {\r\n    const [netInfo, setNetInfo] = useState(false)\r\n\r\n    useEffect(() => {\r\n       \r\n    const unsubscribe = NetInfo.addEventListener((state) => {\r\n        setNetInfo(state.isConnected)\r\n        props.checkInternet(state.isConnected)\r\n    })\r\n\r\n    return () => {\r\n        unsubscribe()\r\n    }\r\n              \r\n    }, [setNetInfo])\r\n\r\n    return (\r\n        <>\r\n            <Text>{netInfo}</Text>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({ \r\n    checkInternet: (netInfo) => dispatch(checkInternet(netInfo))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ConnectionChecker)"]},"metadata":{},"sourceType":"script"}