{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Buttons = _interopRequireDefault(require(\"../../components/Buttons/Buttons\"));\n\nvar _LogoHolder = _interopRequireDefault(require(\"../../components/LogoHolder/LogoHolder\"));\n\nvar _ForbiddenNames = _interopRequireDefault(require(\"../../config/ForbiddenNames.json\"));\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _addUser2 = require(\"../../reduxStore/register/actions/addUser\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Parking-Manager-Mobile-Version-\\\\Project\\\\src\\\\pages\\\\Register\\\\RegisterScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar RegisterScreen = function (_React$Component) {\n  (0, _inherits2.default)(RegisterScreen, _React$Component);\n\n  var _super = _createSuper(RegisterScreen);\n\n  function RegisterScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RegisterScreen);\n    _this = _super.call(this, props);\n\n    _this.emailValidation = function (email) {\n      var reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (email.length != '') {\n        if (reg.test(email) === false) {\n          _this.state.errorStatusEmail = false;\n\n          _this.setState({\n            errorMessageEmail: 'Error: Email address is invalid.'\n          });\n        } else {\n          _this.setState({\n            email: email\n          });\n\n          _this.state.errorStatusEmail = true;\n        }\n      } else {\n        _this.state.errorStatusEmail = false;\n\n        _this.setState({\n          errorMessageEmail: 'Error: Input field cannot be empty.'\n        });\n\n        return false;\n      }\n    };\n\n    _this.passwordValidation = function (password) {\n      var reg = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n\n      if (password.length != '') {\n        if (reg.test(password) === false) {\n          _this.state.errorStatusPassword = false;\n\n          _this.setState({\n            errorMessagePassword: 'Error: Password is invalid. Minimum eight characters, at least one letter and one number'\n          });\n        } else {\n          _this.setState({\n            password: password\n          });\n\n          _this.state.errorStatusPassword = true;\n        }\n\n        return true;\n      } else {\n        _this.state.errorStatusPassword = false;\n\n        _this.setState({\n          errorMessagePassword: 'Error: Input field cannot be empty.'\n        });\n\n        return false;\n      }\n    };\n\n    _this.usernameValidation = function (username) {\n      if (username.length != '' && username.length > 2) {\n        if (_ForbiddenNames.default.reservedwords.includes(username.toLowerCase())) {\n          _this.state.errorStatusUsername = false;\n\n          _this.setState({\n            errorMessageUsername: 'Error: This username is forbidden'\n          });\n        } else {\n          _this.setState({\n            username: username\n          });\n\n          _this.state.errorStatusUsername = true;\n        }\n\n        return true;\n      } else {\n        _this.state.errorStatusUsername = false;\n\n        _this.setState({\n          errorMessageUsername: 'Error: Input field needs to contains at least 3 letters.'\n        });\n\n        return false;\n      }\n    };\n\n    _this.onNext = function _callee() {\n      var _this$state, email, password;\n\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, email = _this$state.email, password = _this$state.password;\n\n              if (!(_this.emailValidation(email) == true || _this.passwordValidation(password) == true)) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return _regenerator.default.awrap(_this.setState(function (prevState) {\n                return {\n                  status: !prevState.status\n                };\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onLogin = function _callee2() {\n      var navigate;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigate = _this.props.navigation.navigate;\n              navigate('Login');\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.AddUser = function _callee3() {\n      var navigate;\n      return _regenerator.default.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              navigate = _this.props.navigation.navigate;\n\n              if (!(_this.props.status == '0')) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 4;\n              return _regenerator.default.awrap(_this.setState({\n                errorStatusEmail: true\n              }));\n\n            case 4:\n              navigate('Login');\n              _context3.next = 9;\n              break;\n\n            case 7:\n              _context3.next = 9;\n              return _regenerator.default.awrap(_this.setState({\n                errorStatusEmail: false\n              }));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onMenu = function _callee4() {\n      var _this$state2, username, email, password;\n\n      return _regenerator.default.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this$state2 = _this.state, username = _this$state2.username, email = _this$state2.email, password = _this$state2.password;\n\n              if (!(_this.usernameValidation(username) == true)) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 4;\n              return _regenerator.default.awrap(_this.props.addUser(username, password, email));\n\n            case 4:\n              _context4.next = 6;\n              return _regenerator.default.awrap(_this.AddUser());\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.renderNextScreen = function () {\n      return _react.default.createElement(_reactNative.View, {\n        style: styles.loginContainer,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.top,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }), _react.default.createElement(_LogoHolder.default, {\n        style: styles.imageContainer,\n        source: require(\"../../../assets/favicon.png\"),\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: styles.container,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.inputForm,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        style: styles.inputField,\n        placeholderTextColor: \"white\",\n        placeholder: \"Username\",\n        onChangeText: function onChangeText(username) {\n          return _this.usernameValidation(username);\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }), _react.default.createElement(_reactNativePaper.HelperText, {\n        type: \"error\",\n        style: styles.errorMessage,\n        visible: !_this.state.errorStatusUsername,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, _this.state.errorMessageUsername)), _react.default.createElement(_reactNative.View, {\n        style: {\n          marginBottom: 20\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNativePaper.HelperText, {\n        type: \"error\",\n        style: styles.errorMessage,\n        visible: !_this.state.errorStatusEmail,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }, _this.props.error), _react.default.createElement(_Buttons.default, {\n        onPress: _this.onMenu,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, \"Sign in\")), _react.default.createElement(_reactNative.View, {\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_Buttons.default, {\n        onPress: _this.onLogin,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, \"Go To Login\"))));\n    };\n\n    _this.renderLoginScreen = function () {\n      return _react.default.createElement(_reactNative.View, {\n        style: styles.loginContainer,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.top,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }), _react.default.createElement(_LogoHolder.default, {\n        source: require(\"../../../assets/favicon.png\"),\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: styles.container,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.inputForm,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        style: styles.inputField,\n        placeholderTextColor: \"white\",\n        placeholder: \"Email\",\n        keyboardType: \"email-address\",\n        onChangeText: function onChangeText(email) {\n          return _this.emailValidation(email);\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }\n      }), _react.default.createElement(_reactNativePaper.HelperText, {\n        type: \"error\",\n        style: styles.errorMessage,\n        visible: !_this.state.errorStatusEmail,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }\n      }, _this.state.errorMessageEmail)), _react.default.createElement(_reactNative.View, {\n        style: styles.inputForm,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        style: styles.inputField,\n        placeholderTextColor: \"white\",\n        placeholder: \"Password\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(password) {\n          return _this.passwordValidation(password);\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }\n      }), _react.default.createElement(_reactNativePaper.HelperText, {\n        type: \"error\",\n        style: styles.errorMessage,\n        visible: !_this.state.errorStatusPassword,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }, _this.state.errorMessagePassword)), _react.default.createElement(_reactNative.View, {\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_Buttons.default, {\n        onPress: _this.onNext,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }, \"Next\"))));\n    };\n\n    _this.state = {\n      email: '',\n      password: '',\n      username: '',\n      status: true,\n      errorStatusEmail: true,\n      errorMessageEmail: '',\n      errorStatusPassword: true,\n      errorMessagePassword: '',\n      errorStatusUsername: true,\n      errorMessageUsername: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(RegisterScreen, [{\n    key: \"render\",\n    value: function render() {\n      var newStatus = this.state;\n      return _react.default.createElement(_react.default.Fragment, null, newStatus.status ? this.renderLoginScreen() : this.renderNextScreen());\n    }\n  }]);\n  return RegisterScreen;\n}(_react.default.Component);\n\nvar styles = _reactNative.StyleSheet.create({\n  top: {\n    width: _reactNative.Dimensions.get('window').width,\n    height: 40,\n    backgroundColor: '#12285c'\n  },\n  loginContainer: {\n    flex: 1,\n    height: \"100%\",\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    backgroundColor: '#2A303E',\n    marginTop: 30\n  },\n  inputField: {\n    borderRadius: 3,\n    borderWidth: 0.2,\n    borderColor: 'white',\n    width: \"80%\",\n    padding: 15,\n    color: \"white\"\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    flexDirection: 'column',\n    width: \"100%\",\n    marginBottom: 140\n  },\n  inputForm: {\n    alignItems: 'center',\n    width: \"80%\",\n    marginBottom: 30\n  },\n  errorMessage: {\n    alignSelf: 'center',\n    width: \"80%\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.register.loading,\n    username: state.register.username,\n    email: state.register.email,\n    error: state.register.error,\n    status: state.register.status\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addUser: function addUser(username, password, email) {\n      return dispatch((0, _addUser2.addUser)(username, password, email));\n    }\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(RegisterScreen);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/pages/Register/RegisterScreen.js"],"names":["RegisterScreen","props","emailValidation","email","reg","length","test","state","errorStatusEmail","setState","errorMessageEmail","passwordValidation","password","errorStatusPassword","errorMessagePassword","usernameValidation","username","forbiddenWords","reservedwords","includes","toLowerCase","errorStatusUsername","errorMessageUsername","onNext","prevState","status","onLogin","navigate","navigation","AddUser","onMenu","addUser","renderNextScreen","styles","loginContainer","top","imageContainer","require","container","inputForm","inputField","errorMessage","marginBottom","error","renderLoginScreen","newStatus","React","Component","StyleSheet","create","width","Dimensions","get","height","backgroundColor","flex","alignItems","justifyContent","flexDirection","marginTop","borderRadius","borderWidth","borderColor","padding","color","alignSelf","mapStateToProps","loading","register","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { StyleSheet, View, TextInput, Dimensions } from 'react-native'\r\nimport React from 'react'\r\nimport ButtonComp from '@src/components/Buttons/Buttons'\r\nimport LogoHolder from '@src/components/LogoHolder/LogoHolder'\r\nimport forbiddenWords from '@src/config/ForbiddenNames.json'\r\nimport { HelperText } from 'react-native-paper'\r\nimport { addUser } from '../../reduxStore/register/actions/addUser'\r\nimport { connect } from 'react-redux'\r\n\r\nclass RegisterScreen extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            username: '',\r\n            status: true,\r\n            errorStatusEmail: true,\r\n            errorMessageEmail: '',\r\n            errorStatusPassword: true,\r\n            errorMessagePassword: '',\r\n            errorStatusUsername: true,\r\n            errorMessageUsername: ''\r\n        }\r\n    }\r\n\r\n    emailValidation = (email) => {\r\n        let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n\r\n        if(email.length != '') {\r\n            if (reg.test(email) === false) {\r\n                this.state.errorStatusEmail = false\r\n                this.setState({ errorMessageEmail: 'Error: Email address is invalid.' })\r\n            } else {\r\n                this.setState({ email: email })\r\n                this.state.errorStatusEmail = true\r\n            }\r\n        } else {\r\n            this.state.errorStatusEmail = false\r\n            this.setState({ errorMessageEmail: 'Error: Input field cannot be empty.' })\r\n            return false\r\n        }\r\n    }\r\n\r\n    passwordValidation = (password) => {\r\n        let reg = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/\r\n\r\n        if(password.length != '') {\r\n            if(reg.test(password) === false) {\r\n                this.state.errorStatusPassword = false\r\n                this.setState({ errorMessagePassword: 'Error: Password is invalid. Minimum eight characters, at least one letter and one number' })\r\n            } else {\r\n                this.setState({ password: password })\r\n                this.state.errorStatusPassword = true\r\n            }\r\n            return true\r\n        } else {\r\n            this.state.errorStatusPassword = false\r\n            this.setState({ errorMessagePassword: 'Error: Input field cannot be empty.'})\r\n            return false\r\n        }\r\n    }\r\n\r\n    usernameValidation = (username) => {\r\n        if(username.length != '' && username.length > 2) {\r\n            if(forbiddenWords.reservedwords.includes(username.toLowerCase())) {\r\n                this.state.errorStatusUsername = false\r\n                this.setState({ errorMessageUsername: 'Error: This username is forbidden' })\r\n            } else {\r\n                this.setState({ username: username })\r\n                this.state.errorStatusUsername = true\r\n            }\r\n            return true\r\n        } else {\r\n            this.state.errorStatusUsername = false\r\n            this.setState({ errorMessageUsername: 'Error: Input field needs to contains at least 3 letters.' })\r\n            return false\r\n        }\r\n    }\r\n    \r\n    onNext = async() => {\r\n        const { email, password } = this.state\r\n        if(this.emailValidation(email) == true || this.passwordValidation(password) == true) {\r\n            await this.setState((prevState) => ({status: !prevState.status}))\r\n        }\r\n    }\r\n\r\n    onLogin = async() => {\r\n        const { navigate } = this.props.navigation\r\n        navigate('Login')\r\n    }\r\n    \r\n    AddUser = async () => {\r\n        const { navigate } = this.props.navigation\r\n        if(this.props.status == '0') {\r\n            await this.setState({ errorStatusEmail: true })\r\n            navigate('Login')\r\n        } else {\r\n            await this.setState({ errorStatusEmail: false })\r\n        }\r\n    }\r\n\r\n    onMenu = async() => {\r\n        const { username, email, password } = this.state\r\n        if(this.usernameValidation(username) == true){\r\n            await this.props.addUser(username, password, email)\r\n            await this.AddUser()\r\n        }\r\n    }\r\n\r\n    renderNextScreen = () =>{\r\n        return (\r\n        <View style={ styles.loginContainer }>\r\n                <View style= {styles.top}></View>\r\n                <LogoHolder style={ styles.imageContainer } source={ require('../../../assets/favicon.png') }/>\r\n            <View style= { styles.container }>\r\n                <View style = { styles.inputForm }>\r\n                    <TextInput style={ styles.inputField } placeholderTextColor=\"white\" placeholder={\"Username\"} onChangeText={(username) => this.usernameValidation(username)}/>\r\n                    <HelperText type=\"error\" style={ styles.errorMessage } visible = { !this.state.errorStatusUsername }>{ this.state.errorMessageUsername }</HelperText>\r\n                </View>\r\n                <View style={{ marginBottom: 20 }}>\r\n                <HelperText type=\"error\" style={ styles.errorMessage } visible = { !this.state.errorStatusEmail }>{ this.props.error }</HelperText>\r\n                    <ButtonComp onPress={ this.onMenu }>Sign in</ButtonComp>\r\n                </View>\r\n                <View>\r\n                    <ButtonComp onPress={ this.onLogin }>Go To Login</ButtonComp>\r\n                </View>\r\n            </View>\r\n        </View>\r\n        )\r\n    }\r\n\r\n    renderLoginScreen = () => {\r\n        return (\r\n            <View style={styles.loginContainer}>\r\n                    <View style= {styles.top}></View>\r\n                    <LogoHolder source={require('../../../assets/favicon.png')}/>\r\n                <View style= {styles.container}>\r\n                    <View style = {styles.inputForm}>\r\n                        <TextInput style={styles.inputField} placeholderTextColor=\"white\" placeholder={\"Email\"} keyboardType=\"email-address\" onChangeText={(email) => this.emailValidation(email)}/>\r\n                        <HelperText type=\"error\" style={styles.errorMessage} visible = {!this.state.errorStatusEmail}>{this.state.errorMessageEmail}</HelperText>\r\n                    </View>\r\n                    <View style = {styles.inputForm}>\r\n                        <TextInput style={styles.inputField} placeholderTextColor=\"white\" placeholder={\"Password\"} secureTextEntry={true} onChangeText={(password) => this.passwordValidation(password)}/>\r\n                        <HelperText type=\"error\" style={styles.errorMessage} visible = {!this.state.errorStatusPassword}>{this.state.errorMessagePassword}</HelperText>\r\n                    </View>\r\n                    <View>\r\n                        <ButtonComp onPress={this.onNext}>Next</ButtonComp>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const newStatus = this.state\r\n    return (\r\n        <>\r\n         {newStatus.status ? this.renderLoginScreen() : this.renderNextScreen()}\r\n        </>\r\n    )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    top: {\r\n        width: Dimensions.get('window').width,\r\n        height: 40,\r\n        backgroundColor: '#12285c'\r\n    },\r\n    loginContainer: {\r\n        flex:1,\r\n        height: \"100%\",\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#2A303E',\r\n        marginTop: 30\r\n    },\r\n    inputField: {\r\n        borderRadius: 3,\r\n        borderWidth: 0.2,\r\n        borderColor: 'white',\r\n        width: \"80%\",\r\n        padding: 15,\r\n        color: \"white\",\r\n    },\r\n    container: {\r\n        flex:1,\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        width: \"100%\",\r\n        marginBottom: 140\r\n    },\r\n    inputForm: {\r\n        alignItems: 'center',\r\n        width: \"80%\",\r\n        marginBottom: 30\r\n    },\r\n    errorMessage: {\r\n        alignSelf: 'center',\r\n        width: \"80%\"\r\n    }\r\n})\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.register.loading,\r\n        username: state.register.username,\r\n        email: state.register.email,\r\n        error: state.register.error,\r\n        status: state.register.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({ \r\n    addUser: (username, password, email) => dispatch(addUser(username, password, email)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterScreen)"]},"metadata":{},"sourceType":"script"}