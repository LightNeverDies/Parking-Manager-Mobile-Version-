{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addUser = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar addUser = function addUser(username, password, email) {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(fetch(\"http://192.168.1.7:3000/user/register/?username=\" + username + \"&password=\" + password + \"&email=\" + email).then(function (response) {\n              return response.json().then(function (result) {\n                if (!result.error) {\n                  dispatch({\n                    type: _constants.userRegister_Success,\n                    payload: {\n                      username: result.username,\n                      status: result.status\n                    }\n                  });\n                } else {\n                  dispatch({\n                    type: _constants.userRegister_Exists,\n                    payload: {\n                      error: result.error,\n                      username: result.username,\n                      email: result.email,\n                      status: result.status\n                    }\n                  });\n                }\n              });\n            }).catch(function (err) {\n              return err.message;\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.addUser = addUser;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/register/actions/addUser.js"],"names":["addUser","username","password","email","dispatch","fetch","then","response","json","result","error","type","userRegister_Success","payload","status","userRegister_Exists","catch","err","message"],"mappings":";;;;;;;;;AAAA;;AAEO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB;AAAA,SAA+B,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAC5CC,KAAK,sDAAoDJ,QAApD,kBAAyEC,QAAzE,eAA2FC,KAA3F,CAAL,CACLG,IADK,CACA,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,GACnBF,IADmB,CACd,UAACG,MAAD,EAAY;AACd,oBAAG,CAACA,MAAM,CAACC,KAAX,EAAkB;AACdN,kBAAAA,QAAQ,CAAE;AACNO,oBAAAA,IAAI,EAAEC,+BADA;AAENC,oBAAAA,OAAO,EAAE;AAAEZ,sBAAAA,QAAQ,EAAEQ,MAAM,CAACR,QAAnB;AACDa,sBAAAA,MAAM,EAAEL,MAAM,CAACK;AADd;AAFH,mBAAF,CAAR;AAMH,iBAPD,MAOO;AACHV,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEI,8BADD;AAELF,oBAAAA,OAAO,EAAE;AAAEH,sBAAAA,KAAK,EAAED,MAAM,CAACC,KAAhB;AACDT,sBAAAA,QAAQ,EAAEQ,MAAM,CAACR,QADhB;AAEDE,sBAAAA,KAAK,EAAEM,MAAM,CAACN,KAFb;AAGDW,sBAAAA,MAAM,EAAEL,MAAM,CAACK;AAHd;AAFJ,mBAAD,CAAR;AAOH;AACJ,eAlBmB,CAAd;AAAA,aADA,EAoBLE,KApBK,CAoBC,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,OAAb;AAAA,aApBD,CAD4C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;AAAA,CAAhB","sourcesContent":["import { userRegister_Success, userRegister_Exists } from '../../constants/constants'\r\n\r\nexport const addUser = (username, password, email) => async (dispatch) => {\r\n    await fetch(`http://192.168.1.7:3000/user/register/?username=${username}&password=${password}&email=${email}`)\r\n    .then((response) => response.json()\r\n    .then((result) => {\r\n        if(!result.error) {\r\n            dispatch ({\r\n                type: userRegister_Success,\r\n                payload: { username: result.username,\r\n                        status: result.status,\r\n                }\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: userRegister_Exists,\r\n                payload: { error: result.error, \r\n                        username: result.username, \r\n                        email: result.email,\r\n                        status: result.status}\r\n            })\r\n        }\r\n    }))\r\n    .catch((err) => err.message)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}