{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaskedTextInputComponent = exports.MaskedTextInput = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _mask = require(\"../utils/mask\");\n\nvar _excluded = [\"mask\", \"type\", \"options\", \"defaultValue\", \"onChangeText\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar MaskedTextInputComponent = function MaskedTextInputComponent(_ref, ref) {\n  var _ref$mask = _ref.mask,\n      pattern = _ref$mask === void 0 ? \"\" : _ref$mask,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"custom\" : _ref$type,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      defaultValue = _ref.defaultValue,\n      onChangeText = _ref.onChangeText,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var defaultValueCustom = defaultValue || \"\";\n  var defaultValueCurrency = defaultValue || \"0\";\n  var initialMaskedValue = type === \"currency\" ? (0, _mask.mask)(defaultValueCurrency, pattern, type, options) : (0, _mask.mask)(defaultValueCustom, pattern, type, options);\n  var initialUnMaskedValue = type === \"currency\" ? (0, _mask.unMask)(defaultValueCurrency, type) : (0, _mask.unMask)(defaultValueCustom, type);\n\n  var _useState = (0, _react.useState)(initialMaskedValue),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      maskedValue = _useState2[0],\n      setMaskedValue = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(initialUnMaskedValue),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      unMaskedValue = _useState4[0],\n      setUnmaskedValue = _useState4[1];\n\n  function onChange(value) {\n    var newUnMaskedValue = (0, _mask.unMask)(value, type);\n    var newMaskedValue = (0, _mask.mask)(newUnMaskedValue, pattern, type, options);\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  (0, _react.useEffect)(function () {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n  return _react.default.createElement(_reactNative.TextInput, _extends({\n    onChangeText: function onChangeText(value) {\n      return onChange(value);\n    },\n    value: maskedValue,\n    ref: ref\n  }, rest));\n};\n\nexports.MaskedTextInputComponent = MaskedTextInputComponent;\nvar MaskedTextInput = (0, _react.forwardRef)(MaskedTextInputComponent);\nexports.MaskedTextInput = MaskedTextInput;","map":{"version":3,"sources":["MaskedTextInput.tsx"],"names":["MaskedTextInputComponent","mask","pattern","type","options","rest","defaultValueCustom","defaultValue","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","unMask","useState","newUnMaskedValue","newMaskedValue","setMaskedValue","setUnmaskedValue","useEffect","onChangeText","value","onChange","ref","MaskedTextInput","forwardRef"],"mappings":";;;;;;;;;;;AAAA;;AAMA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAaO,IAAMA,wBAGZ,GAAG,SAHSA,wBAGT,OAAA,GAAA,EAUC;AAAA,uBARDC,IAQC;AAAA,MARKC,OAQL,0BATH,EASG;AAAA,uBAPDC,IAOC;AAAA,MAPDA,IAOC,0BATH,QASG;AAAA,0BANDC,OAMC;AAAA,MANDA,OAMC,6BATH,EASG;AAAA,MATH,YASG,QATH,YASG;AAAA,MATH,YASG,QATH,YASG;AAAA,MAHEC,IAGF;AACH,MAAMC,kBAAkB,GAAGC,YAAY,IAAvC,EAAA;AACA,MAAMC,oBAAoB,GAAGD,YAAY,IAAzC,GAAA;AAEA,MAAME,kBAAkB,GACtBN,IAAI,KAAJA,UAAAA,GACIF,gBAAI,oBAAJA,EAAI,OAAJA,EAAI,IAAJA,EADJE,OACIF,CADJE,GAEIF,gBAAI,kBAAJA,EAAI,OAAJA,EAAI,IAAJA,EAHN,OAGMA,CAHN;AAKA,MAAMS,oBAAoB,GACxBP,IAAI,KAAJA,UAAAA,GACIQ,kBAAM,oBAANA,EADJR,IACIQ,CADJR,GAEIQ,kBAAM,kBAANA,EAHN,IAGMA,CAHN;;AAKA,kBAAsCC,qBAAtC,kBAAsCA,CAAtC;AAAA;AAAA,MAAM,WAAN;AAAA,MAAM,cAAN;;AACA,mBAA0CA,qBAA1C,oBAA0CA,CAA1C;AAAA;AAAA,MAAM,aAAN;AAAA,MAAM,gBAAN;;AAEA,WAAA,QAAA,CAAA,KAAA,EAAiC;AAC/B,QAAMC,gBAAgB,GAAGF,kBAAM,KAANA,EAAzB,IAAyBA,CAAzB;AACA,QAAMG,cAAc,GAAGb,gBAAI,gBAAJA,EAAI,OAAJA,EAAI,IAAJA,EAAvB,OAAuBA,CAAvB;AAEAc,IAAAA,cAAc,CAAdA,cAAc,CAAdA;AACAC,IAAAA,gBAAgB,CAAhBA,gBAAgB,CAAhBA;AACD;;AAEDC,wBAAU,YAAM;AACdC,IAAAA,YAAY,CAAA,WAAA,EAAZA,aAAY,CAAZA;AADO,GAATD,EAEG,CAAA,WAAA,EAFHA,aAEG,CAFHA;AAIA,SACE,eAAA,aAAA,CAAA,sBAAA,EAAA,QAAA,CAAA;AACE,IAAA,YAAY,EAAGE,sBAAAA,KAAD;AAAA,aAAWC,QAAQ,CADnC,KACmC,CAAnB;AAAA,KADhB;AAEE,IAAA,KAAK,EAFP,WAAA;AAGE,IAAA,GAAG,EAAEC;AAHP,GAAA,EADF,IACE,CAAA,CADF;AA1CK,CAAA;;;AAoDA,IAAMC,eAAe,GAAGC,uBAAxB,wBAAwBA,CAAxB","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from \"react\";\nimport { TextInput, TextInputProps } from \"react-native\";\nimport { mask, unMask } from \"../utils/mask\";\nimport type { MaskOptions } from \"../@types/MaskOptions\";\n\ntype TIProps = Omit<TextInputProps, \"onChangeText\">;\n\ninterface MaskedTextInputProps extends TIProps {\n  mask?: string;\n  type?: \"custom\" | \"currency\";\n  options?: MaskOptions;\n  defaultValue?: string;\n  onChangeText: (text: string, rawText: string) => void;\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = \"\",\n    type = \"custom\",\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    ...rest\n  },\n  ref\n) => {\n  const defaultValueCustom = defaultValue || \"\";\n  const defaultValueCurrency = defaultValue || \"0\";\n\n  const initialMaskedValue = \n    type === \"currency\" \n      ? mask(defaultValueCurrency, pattern, type, options) \n      : mask(defaultValueCustom, pattern, type, options);\n\n  const initialUnMaskedValue =\n    type === \"currency\" \n      ? unMask(defaultValueCurrency, type)\n      : unMask(defaultValueCustom, type);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  return (\n    <TextInput\n      onChangeText={(value) => onChange(value)}\n      value={maskedValue}\n      ref={ref}\n      {...rest}\n    />\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"]},"metadata":{},"sourceType":"script"}