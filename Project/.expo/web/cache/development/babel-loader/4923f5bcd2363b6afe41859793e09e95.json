{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userCars = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar userCars = function userCars(username, carNumber, checked) {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(fetch(\"http://192.168.1.5:3000/user/cars/?username=\" + username + \"&carNumber=\" + carNumber + \"&checked=\" + checked).then(function (response) {\n              return response.json().then(function (result) {\n                if (!result.error) {\n                  dispatch({\n                    type: _constants.userCars_Success,\n                    payload: {\n                      status: result.status\n                    }\n                  });\n                  setTimeout(function () {\n                    dispatch({\n                      type: _constants.userCars_Loading\n                    });\n                  }, 1500);\n                } else {\n                  dispatch({\n                    type: _constants.userCars_Failed,\n                    payload: {\n                      status: result.status,\n                      error: result.error\n                    }\n                  });\n                  setTimeout(function () {\n                    dispatch({\n                      type: _constants.userCars_Loading\n                    });\n                  }, 1500);\n                }\n              });\n            }).catch(function (err) {\n              return err.message;\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.userCars = userCars;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/userCars/actions/userCars.js"],"names":["userCars","username","carNumber","checked","dispatch","fetch","then","response","json","result","error","type","userCars_Success","payload","status","setTimeout","userCars_Loading","userCars_Failed","catch","err","message"],"mappings":";;;;;;;;;AAAA;;AAEO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB;AAAA,SAAkC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAChDC,KAAK,kDAAgDJ,QAAhD,mBAAsEC,SAAtE,iBAA2FC,OAA3F,CAAL,CACLG,IADK,CACA,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,GACnBF,IADmB,CACd,UAACG,MAAD,EAAY;AACd,oBAAG,CAACA,MAAM,CAACC,KAAX,EAAkB;AACdN,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEC,2BADD;AAELC,oBAAAA,OAAO,EAAE;AACLC,sBAAAA,MAAM,EAAEL,MAAM,CAACK;AADV;AAFJ,mBAAD,CAAR;AAMAC,kBAAAA,UAAU,CAAC,YAAM;AACbX,oBAAAA,QAAQ,CAAC;AAAEO,sBAAAA,IAAI,EAAEK;AAAR,qBAAD,CAAR;AACH,mBAFS,EAEP,IAFO,CAAV;AAGH,iBAVD,MAUO;AACHZ,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEM,0BADD;AAELJ,oBAAAA,OAAO,EAAE;AACLC,sBAAAA,MAAM,EAAEL,MAAM,CAACK,MADV;AAELJ,sBAAAA,KAAK,EAAED,MAAM,CAACC;AAFT;AAFJ,mBAAD,CAAR;AAOAK,kBAAAA,UAAU,CAAC,YAAM;AACbX,oBAAAA,QAAQ,CAAC;AAAEO,sBAAAA,IAAI,EAAEK;AAAR,qBAAD,CAAR;AACH,mBAFS,EAEP,IAFO,CAAV;AAGH;AACJ,eAxBmB,CAAd;AAAA,aADA,EA0BLE,KA1BK,CA0BC,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,OAAb;AAAA,aA1BD,CADgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;AAAA,CAAjB","sourcesContent":["import { userCars_Success, userCars_Failed, userCars_Loading } from \"../../constants/constants\"\r\n\r\nexport const userCars = (username, carNumber, checked) => async (dispatch) => {\r\n    await fetch(`http://192.168.1.5:3000/user/cars/?username=${username}&carNumber=${carNumber}&checked=${checked}`)\r\n    .then((response) => response.json()\r\n    .then((result) => {\r\n        if(!result.error) {\r\n            dispatch({\r\n                type: userCars_Success,\r\n                payload: {\r\n                    status: result.status\r\n                }\r\n            })\r\n            setTimeout(() => {\r\n                dispatch({ type: userCars_Loading })\r\n            }, 1500)\r\n        } else {\r\n            dispatch({\r\n                type: userCars_Failed,\r\n                payload: {\r\n                    status: result.status,\r\n                    error: result.error\r\n                }\r\n            })\r\n            setTimeout(() => {\r\n                dispatch({ type: userCars_Loading })\r\n            }, 1500)\r\n        }\r\n    }))\r\n    .catch((err) => err.message)\r\n}"]},"metadata":{},"sourceType":"script"}