{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userFind = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar userFind = function userFind(email, password) {\n  return function _callee(dispatch) {\n    var data;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = {\n              email: email,\n              password: password\n            };\n            _context.next = 3;\n            return _regenerator.default.awrap(fetch(\"http://192.168.1.2:3000/user/login\", {\n              method: 'POST',\n              mode: 'cors',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data)\n            }).then(function (response) {\n              return response.json();\n            }).then(function (result) {\n              if (!result.error) {\n                dispatch({\n                  type: _constants.findUser_OnLogin,\n                  payload: {\n                    logged: result.logged,\n                    username: result.username,\n                    accountCreated: result.created\n                  }\n                });\n                var _token = result.token;\n\n                _asyncStorage.default.setItem(\"token\", _token);\n              } else {\n                dispatch({\n                  type: _constants.findUser_Error,\n                  payload: {\n                    logged: result.logged,\n                    error: result.error\n                  }\n                });\n\n                try {\n                  _asyncStorage.default.removeItem(token);\n\n                  return true;\n                } catch (exception) {\n                  return false;\n                }\n              }\n            }).catch(function (err) {\n              return console.log(err.message);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.userFind = userFind;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/login/actions/findUser.js"],"names":["userFind","email","password","dispatch","data","fetch","method","mode","headers","body","JSON","stringify","then","response","json","result","error","type","findUser_OnLogin","payload","logged","username","accountCreated","created","token","AsyncStorage","setItem","findUser_Error","removeItem","exception","catch","err","console","log","message"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCC,YAAAA,IADmC,GAC5B;AAAEH,cAAAA,KAAK,EAAEA,KAAT;AAAgBC,cAAAA,QAAQ,EAAEA;AAA1B,aAD4B;AAAA;AAAA,8CAEnCG,KAAK,uCAAuC;AAC9CC,cAAAA,MAAM,EAAE,MADsC;AAE9CC,cAAAA,IAAI,EAAE,MAFwC;AAG9CC,cAAAA,OAAO,EAAE;AACL,0BAAU,kBADL;AAEL,gCAAgB;AAFX,eAHqC;AAO9CC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAPwC,aAAvC,CAAL,CAQHQ,IARG,CAQE,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,aARF,EASLF,IATK,CASA,UAACG,MAAD,EAAY;AACd,kBAAG,CAACA,MAAM,CAACC,KAAX,EAAkB;AACdb,gBAAAA,QAAQ,CAAC;AACLc,kBAAAA,IAAI,EAAEC,2BADD;AAELC,kBAAAA,OAAO,EAAE;AACLC,oBAAAA,MAAM,EAAEL,MAAM,CAACK,MADV;AAELC,oBAAAA,QAAQ,EAAEN,MAAM,CAACM,QAFZ;AAGLC,oBAAAA,cAAc,EAAEP,MAAM,CAACQ;AAHlB;AAFJ,iBAAD,CAAR;AAQA,oBAAMC,MAAK,GAAGT,MAAM,CAACS,KAArB;;AACAC,sCAAaC,OAAb,CAAqB,OAArB,EAA8BF,MAA9B;AACH,eAXD,MAWO;AACHrB,gBAAAA,QAAQ,CAAC;AACLc,kBAAAA,IAAI,EAAEU,yBADD;AAELR,kBAAAA,OAAO,EAAE;AACLC,oBAAAA,MAAM,EAAEL,MAAM,CAACK,MADV;AAELJ,oBAAAA,KAAK,EAAED,MAAM,CAACC;AAFT;AAFJ,iBAAD,CAAR;;AAOA,oBAAI;AACAS,wCAAaG,UAAb,CAAwBJ,KAAxB;;AACA,yBAAO,IAAP;AACH,iBAHD,CAGE,OAAMK,SAAN,EAAiB;AACf,yBAAO,KAAP;AACH;AACJ;AACJ,aApCK,EAoCHC,KApCG,CAoCG,UAACC,GAAD;AAAA,qBAASC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAAT;AAAA,aApCH,CAFmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;AAAA,CAAjB","sourcesContent":["import { findUser_OnLogin, findUser_Error } from '../../constants/constants'\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\r\n\r\nexport const userFind = (email, password) => async (dispatch) => {\r\n    const data = { email: email, password: password }\r\n    await fetch(`http://192.168.1.2:3000/user/login`, {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    }).then((response) => response.json())\r\n    .then((result) => {\r\n        if(!result.error) {\r\n            dispatch({\r\n                type: findUser_OnLogin,\r\n                payload: { \r\n                    logged: result.logged,\r\n                    username: result.username,\r\n                    accountCreated: result.created\r\n                }\r\n            })\r\n            const token = result.token\r\n            AsyncStorage.setItem(\"token\", token)\r\n        } else {\r\n            dispatch({\r\n                type: findUser_Error,\r\n                payload: {\r\n                    logged: result.logged,\r\n                    error: result.error\r\n                }\r\n            })\r\n            try {\r\n                AsyncStorage.removeItem(token)\r\n                return true\r\n            } catch(exception) {\r\n                return false\r\n            }\r\n        }\r\n    }).catch((err) => console.log(err.message))\r\n}"]},"metadata":{},"sourceType":"script"}