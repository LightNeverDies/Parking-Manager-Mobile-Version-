{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBalance = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _constants = require(\"../../constants/constants\");\n\nvar addBalance = function addBalance(username, card_number, first_name, last_name, security_code, exp_date, funds) {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(fetch(\"http://192.168.1.5:3000/user/payment/?username=\" + username + \"&card_number=\" + card_number + \"&first_name=\" + first_name + \"&last_name=\" + last_name + \"&security_code=\" + security_code + \"&exp_date=\" + exp_date + \"&funds=\" + funds).then(function (response) {\n              return response.json().then(function (result) {\n                if (!result.error) {\n                  dispatch({\n                    type: _constants.addPayment_Success,\n                    payload: {\n                      username: result.username,\n                      status: result.status\n                    }\n                  });\n                } else {\n                  dispatch({\n                    type: _constants.addPayment_Failed,\n                    payload: {\n                      error: result.error\n                    }\n                  });\n                }\n              });\n            }).catch(function (err) {\n              return err.message;\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.addBalance = addBalance;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/Parking-Manager-Mobile-Version-/Project/src/reduxStore/payment/actions/addBalance.js"],"names":["addBalance","username","card_number","first_name","last_name","security_code","exp_date","funds","dispatch","fetch","then","response","json","result","error","type","addPayment_Success","payload","status","addPayment_Failed","catch","err","message"],"mappings":";;;;;;;;;AAAA;;AAEO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAEC,QAAF,EAAYC,WAAZ,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,aAAhD,EAA+DC,QAA/D,EAAyEC,KAAzE;AAAA,SAAmF,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACnGC,KAAK,qDAAmDR,QAAnD,qBAA2EC,WAA3E,oBAAqGC,UAArG,mBAA6HC,SAA7H,uBAAwJC,aAAxJ,kBAAkLC,QAAlL,eAAoMC,KAApM,CAAL,CACLG,IADK,CACA,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,GACnBF,IADmB,CACd,UAACG,MAAD,EAAY;AACd,oBAAG,CAACA,MAAM,CAACC,KAAX,EAAkB;AACdN,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEC,6BADD;AAELC,oBAAAA,OAAO,EAAE;AACLhB,sBAAAA,QAAQ,EAAEY,MAAM,CAACZ,QADZ;AAELiB,sBAAAA,MAAM,EAAEL,MAAM,CAACK;AAFV;AAFJ,mBAAD,CAAR;AAOH,iBARD,MAQO;AACHV,kBAAAA,QAAQ,CAAC;AACLO,oBAAAA,IAAI,EAAEI,4BADD;AAELF,oBAAAA,OAAO,EAAE;AACLH,sBAAAA,KAAK,EAAED,MAAM,CAACC;AADT;AAFJ,mBAAD,CAAR;AAMH;AACJ,eAlBmB,CAAd;AAAA,aADA,EAoBLM,KApBK,CAoBC,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,OAAb;AAAA,aApBD,CADmG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnF;AAAA,CAAnB","sourcesContent":["import { addPayment_Success, addPayment_Failed } from \"../../constants/constants\";\r\n\r\nexport const addBalance = ( username, card_number, first_name, last_name, security_code, exp_date, funds) => async (dispatch) => {\r\n    await fetch(`http://192.168.1.5:3000/user/payment/?username=${username}&card_number=${card_number}&first_name=${first_name}&last_name=${last_name}&security_code=${security_code}&exp_date=${exp_date}&funds=${funds}`)\r\n    .then((response) => response.json()\r\n    .then((result) => {\r\n        if(!result.error) {\r\n            dispatch({\r\n                type: addPayment_Success,\r\n                payload: {\r\n                    username: result.username,\r\n                    status: result.status,\r\n                }\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: addPayment_Failed,\r\n                payload: {\r\n                    error: result.error\r\n                }\r\n            })\r\n        }\r\n    }))\r\n    .catch((err) => err.message)\r\n}"]},"metadata":{},"sourceType":"script"}